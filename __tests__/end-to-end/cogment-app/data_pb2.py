# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: data.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='data.proto',
  package='cogment_app',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\ndata.proto\x12\x0b\x63ogment_app\"\x0b\n\tEnvConfig\"9\n\x0bTrialConfig\x12*\n\nenv_config\x18\x01 \x01(\x0b\x32\x16.cogment_app.EnvConfig\"\r\n\x0bObservation\"\x08\n\x06Reward\"\x0e\n\x0c\x43lientAction\"\x0c\n\nTimeAction\"\x0e\n\x0c\x41syncMessageb\x06proto3')
)




_ENVCONFIG = _descriptor.Descriptor(
  name='EnvConfig',
  full_name='cogment_app.EnvConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=27,
  serialized_end=38,
)


_TRIALCONFIG = _descriptor.Descriptor(
  name='TrialConfig',
  full_name='cogment_app.TrialConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='env_config', full_name='cogment_app.TrialConfig.env_config', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=40,
  serialized_end=97,
)


_OBSERVATION = _descriptor.Descriptor(
  name='Observation',
  full_name='cogment_app.Observation',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=99,
  serialized_end=112,
)


_REWARD = _descriptor.Descriptor(
  name='Reward',
  full_name='cogment_app.Reward',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=114,
  serialized_end=122,
)


_CLIENTACTION = _descriptor.Descriptor(
  name='ClientAction',
  full_name='cogment_app.ClientAction',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=124,
  serialized_end=138,
)


_TIMEACTION = _descriptor.Descriptor(
  name='TimeAction',
  full_name='cogment_app.TimeAction',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=140,
  serialized_end=152,
)


_ASYNCMESSAGE = _descriptor.Descriptor(
  name='AsyncMessage',
  full_name='cogment_app.AsyncMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=154,
  serialized_end=168,
)

_TRIALCONFIG.fields_by_name['env_config'].message_type = _ENVCONFIG
DESCRIPTOR.message_types_by_name['EnvConfig'] = _ENVCONFIG
DESCRIPTOR.message_types_by_name['TrialConfig'] = _TRIALCONFIG
DESCRIPTOR.message_types_by_name['Observation'] = _OBSERVATION
DESCRIPTOR.message_types_by_name['Reward'] = _REWARD
DESCRIPTOR.message_types_by_name['ClientAction'] = _CLIENTACTION
DESCRIPTOR.message_types_by_name['TimeAction'] = _TIMEACTION
DESCRIPTOR.message_types_by_name['AsyncMessage'] = _ASYNCMESSAGE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

EnvConfig = _reflection.GeneratedProtocolMessageType('EnvConfig', (_message.Message,), dict(
  DESCRIPTOR = _ENVCONFIG,
  __module__ = 'data_pb2'
  # @@protoc_insertion_point(class_scope:cogment_app.EnvConfig)
  ))
_sym_db.RegisterMessage(EnvConfig)

TrialConfig = _reflection.GeneratedProtocolMessageType('TrialConfig', (_message.Message,), dict(
  DESCRIPTOR = _TRIALCONFIG,
  __module__ = 'data_pb2'
  # @@protoc_insertion_point(class_scope:cogment_app.TrialConfig)
  ))
_sym_db.RegisterMessage(TrialConfig)

Observation = _reflection.GeneratedProtocolMessageType('Observation', (_message.Message,), dict(
  DESCRIPTOR = _OBSERVATION,
  __module__ = 'data_pb2'
  # @@protoc_insertion_point(class_scope:cogment_app.Observation)
  ))
_sym_db.RegisterMessage(Observation)

Reward = _reflection.GeneratedProtocolMessageType('Reward', (_message.Message,), dict(
  DESCRIPTOR = _REWARD,
  __module__ = 'data_pb2'
  # @@protoc_insertion_point(class_scope:cogment_app.Reward)
  ))
_sym_db.RegisterMessage(Reward)

ClientAction = _reflection.GeneratedProtocolMessageType('ClientAction', (_message.Message,), dict(
  DESCRIPTOR = _CLIENTACTION,
  __module__ = 'data_pb2'
  # @@protoc_insertion_point(class_scope:cogment_app.ClientAction)
  ))
_sym_db.RegisterMessage(ClientAction)

TimeAction = _reflection.GeneratedProtocolMessageType('TimeAction', (_message.Message,), dict(
  DESCRIPTOR = _TIMEACTION,
  __module__ = 'data_pb2'
  # @@protoc_insertion_point(class_scope:cogment_app.TimeAction)
  ))
_sym_db.RegisterMessage(TimeAction)

AsyncMessage = _reflection.GeneratedProtocolMessageType('AsyncMessage', (_message.Message,), dict(
  DESCRIPTOR = _ASYNCMESSAGE,
  __module__ = 'data_pb2'
  # @@protoc_insertion_point(class_scope:cogment_app.AsyncMessage)
  ))
_sym_db.RegisterMessage(AsyncMessage)


# @@protoc_insertion_point(module_scope)
